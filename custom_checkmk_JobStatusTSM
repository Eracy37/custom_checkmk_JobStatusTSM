#!/usr/bin/bash

#===============================================================================
# Script Name   : custom_mk_JobStatusTSM
# Author        : GUERRY Cynthia (Eracy37)
# Version       : 1.0.0
# Last Modifed  : 04/06/2025
# Description   : check job status for TSM (Tivoli IBM) - For AIX
#===============================================================================

# Configuration is needed for username and password for dsmadmc
# You need to create a configuration file /etc/check_mk/tsm.cfg
# with the following two lines:
# TSM_USER=XXX
# TSM_PASSWORD=XXX
# If you have more than once instance, make sure that the upper
# login works on all of them.

domain_name=XXX
output_file="/usr/lib/check_mk_agent/local/result_check_job-TSM.txt"
temp_file=$(mktemp)

. "/etc/check_mk/tsm.cfg" || exit 1
if [ -z "${TSM_USER}" ] || [ -z "${TSM_PASSWORD}" ]; then
   echo "Please set TSM_USER and TSM_PASSWORD in /etc/check_mk/tsm.cfg" >&2
   exit 1
fi

dsmcmd="dsmadmc -id=$TSM_USER -pass=$TSM_PASSWORD -dataonly=yes -tab"

{
    first_entry=true
    check_jobs() {
       local schedule=$1
       jobs=$($dsmcmd <<EOF
select distinct node_name from events where scheduled_start >= '1900-01-01' and scheduled_start>current_timestamp-24 hour and domain_name='$domain_name' and schedule_name IN '$schedule'
EOF
    )

       while IFS= read -r job; do
           [ -z "$job" ] && continue
           output=$($dsmcmd <<EOF
select node_name, status, schedule_name, scheduled_start, completed from events where scheduled_start >= '1900-01-01' and scheduled_start>current_timestamp-24 hours and domain_name='$domain_name' and node_name='$job' and schedule_name I
N '$schedule' order by completed desc
EOF
        )
           completion_time=$(echo "$output" | head -1 | awk -F'\t' '{print $5}' | cut -d'.' -f1)
           status=$(echo "$output" | head -1 | awk -F'\t' '{print $2}')

           if $first_entry; then
               first_entry=false
           else
               echo ""
           fi

           if [ "$status" = "Completed" ]; then
               echo -n "0 StatusJobTSM_${job}_${schedule} - OK - Backup Completed (Last: ${completion_time})"
           else
               echo -n "2 StatusJobTSM_${job}_${schedule} - CRIT - Backup Failed (Last: ${completion_time})"
           fi
       done <<< "$jobs"
    }

    # Check command
    check_jobs "SCHEDULE_NAME"

    if ! $first_entry; then
        echo ""
    fi
} > "$temp_file"

mv -f "$temp_file" "$output_file"
